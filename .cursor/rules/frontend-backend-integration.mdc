---
description: 
globs: 
alwaysApply: false
---
# 前后端集成专项协作规范

## 项目状态
- **后端状态**: v0.6.0 开发中 (已完成搜索驱动订阅配置API、内容管理API、订阅管理API、订阅频率管理、自动拉取调度逻辑、RSS内容字段重新定义、用户内容列表API、智能标签推荐系统等核心功能)
- **前端状态**: 用户本地开发完成，已经复制到指定文件夹
- **集成方式**: 复制到指定文件夹后逐个模块进行集成
- **核心原则**: 
  - 前端样式和交互不变，以用户代码为准
  - 集成过程中只对接数据接口，但不变更UI样式和UI交互逻辑
  - 为了保证业务逻辑一致，可以接受微调部分前端组件参数
  - 业务逻辑合理优先原则，前后端有业务逻辑不一致的地方要和用户讨论

## 项目状态
- **后端核心代码位置**: /Users/jermaine/Desktop/RSS/backend
- **前端核心代码位置**: /Users/jermaine/Desktop/RSS/frontend-new，并提供了readme.md文件介绍功能和技术栈

## 协作角色分工

### 用户职责 (产品经理&前端保护者)
- ✅ 提供完整的前端代码
- ✅ 确认前端技术栈和依赖
- ✅ 测试前端功能完整性
- ✅ 验证样式和交互效果
- ✅ 及时反馈不符合预期的变化
- ✅ 决定是否接受数据结构调整方案

### AI助手职责 (集成实施者)
- ✅ 分析前后端数据结构差异
- ✅ 创建API客户端适配层
- ✅ 实现数据格式转换逻辑
- ✅ 确保字段映射业务逻辑正确
- ✅ 保持前端组件接口不变
- ✅ 处理所有技术集成问题

## 集成流程监督机制

### 阶段1: 代码同步准备 ✋ CHECKPOINT
**进入条件**: 
- [ ] 确认用户前端代码准备完毕
- [ ] 确认复制目标路径

**AI检查清单**:
- [ ] 备份当前frontend目录
- [ ] 分析现有项目结构
- [ ] 准备接收目录

**用户检查清单**:
- [ ] 前端代码本地测试通过
- [ ] 确认要复制的文件范围
- [ ] 技术栈信息准备完整

**通过标准**: 双方确认准备就绪，可以开始复制

---

### 阶段2: 代码复制与结构分析 ✋ CHECKPOINT
**进入条件**:
- [ ] 代码复制完成
- [ ] 无复制错误或冲突

**AI检查清单**:
- [ ] 分析前端组件结构
- [ ] 分析后端数据模型、API、数据表
- [ ] 识别数据流和状态管理
- [ ] 对比前后端数据模型
- [ ] 分析前端代码是否缺失
- [ ] 生成兼容性分析报告

**用户检查清单**:
- [ ] 确认代码复制完整
- [ ] 说明主要组件功能
- [ ] 确认期望的数据格式

**通过标准**: 结构分析完成，差异识别清楚

---

### 阶段3: 业务逻辑集成 ✋ CHECKPOINT
**进入条件**:
- [ ] 前后端代码分析完成
- [ ] 准备集成业务功能

**AI检查清单**:
- 待补充

**用户检查清单**:
- 待补充

**通过标准**: 核心业务功能集成完成

---

### 阶段4: 测试与验证 ✋ CHECKPOINT  
**进入条件**:
- [ ] 业务逻辑集成完成
- [ ] 准备全面测试

**AI检查清单**:
- [ ] 执行API接口测试
- [ ] 验证数据流完整性
- [ ] 检查错误处理机制
- [ ] 性能测试通过

**用户检查清单**:
- [ ] 前端所有页面功能正常
- [ ] 样式和交互完全符合预期
- [ ] 用户体验流畅自然
- [ ] 无明显bug或问题

**通过标准**: 全面测试通过，可以部署

## 紧急停止机制 🚨

### 触发条件
- 前端样式发生不可接受的变化
- 交互逻辑与用户预期不符
- 数据结构冲突无法解决
- 任何影响用户体验的问题
- 用户要求停止

### 停止流程
1. **立即停止当前操作**
2. **保护用户前端代码**
3. **分析问题根本原因**
4. **制定解决方案**
5. **用户确认后再继续**

## 数据结构适配原则

### 业务逻辑合理优先原则
- 业务逻辑合理优先
- 前端和后端的业务逻辑冲突：由AI提供方案调整建议，由用户进行决策

### 渐进适配原则
- 一次只修改一个数据结构
- 每次修改都要用户确认
- 可以随时回滚到上一步

### 透明化原则
- 所有数据转换逻辑可见
- 字段映射关系明确
- 业务逻辑变更要说明

## 项目稳定性保护原则
- 用户和AI协作过程中，按模块拆分推进项目
- 前端和后端有重要调整时，用户及时发出git同步指令

## 质量保证机制

### 代码质量
- 保持原有代码风格
- 添加必要的类型定义
- 完善错误处理逻辑

### 功能质量  
- 确保核心功能完整
- 保持用户体验一致
- 性能不能显著下降

### 文档质量
- 记录所有重要决策
- 更新API文档
- 维护变更日志

## 成功标准

### 技术标准
- [ ] 前后端API完全对接
- [ ] 数据流转正常
- [ ] 错误处理完善
- [ ] 性能表现良好

### 体验标准
- [ ] 前端样式100%保持
- [ ] 交互逻辑完全一致
- [ ] 用户体验流畅
- [ ] 功能完整可用



## 使用说明
1. 每个阶段完成后必须通过检查点
2. 遇到问题立即触发紧急停止机制
3. 用户有绝对的最终决定权
4. AI必须严格遵循前端优先原则 